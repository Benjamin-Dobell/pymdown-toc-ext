= pymdown-toc-ext: Table of Contents (Extended) image:https://shields.io/pypi/v/pymdown-toc-ext["Version", link="https://pypi.org/project/pymdown-toc-ext/"] image:https://shields.io/pypi/l/pymdown-toc-ext["License", link="https://github.com/Benjamin-Dobell/pymdown-toc-ext/blob/master/LICENSE"]
:toc:
ifndef::env-github[:icons: font]
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

An extension for https://python-markdown.github.io[Python-Markdown]
which extends the built-in
https://python-markdown.github.io/extensions/toc/[toc] with additional
capabilities to customize the generated table of contents.

== Setup

=== Prerequisites

Aside from Python-Markdown itself, you’ll want to enable the official
Python-Markdown
https://python-markdown.github.io/extensions/attr_list/[attr_list]
extension.

=== Installation

[source,sh]
----
pip install pymdown-toc-ext
----

=== Python-Markdown API

Please refer to https://python-markdown.github.io/extensions/

=== MkDocs

In `mkdocs.yml` under `markdown_extensions` replace `toc` with `toc_ext`
i.e.

[source,yaml]
----
markdown_extensions:
  - toc_ext
----

=== Configuration

This extension extends the built-in Markdown `toc` extensions. All
https://python-markdown.github.io/extensions/toc/[its configuration
options] are supported.

== Usage

pymdown-toc-ext looks for the presence of `data-toc-*` attributes on
Markdown elements. Given Markdown itself doesn’t provide support for
adding attributes, this is why the Markdown `attr_list` extension is
required.

=== Inserting a new entry

The purpose of the Table of Contents is to provide links to some point
in your document. The standard `toc` extension just supports Markdown
headers, however we support any element that has both an ID and a
`data-toc-label` attribute.

[source,markdown]
----
[](){: #top data-toc-label="Goto Top" }
----

This will insert an entry with the text "Goto Top" linking to our
empty (i.e. invisible) anchor with the ID `top`.

_**Note**: We strip `data-toc-*` attributes that we consume. So the above
will simply generate `<a id="top" href=""></a>`._

=== Inserting a child entry

By default, we insert entries at the _top_ of the Table of Contents.
However, we may wish to insert the entry as a child of another entry.
This is achieved by the inclusion of the `data-toc-child-of` attribute
specifying the ID of another TOC entry.

[source,markdown]
----
## Category 1

[](){: #intro data-toc-label="Intro" data-toc-child-of="category-1" }
Some introductory text that doesn't warrant a heading.

## Category 2

[](){: #top data-toc-label="Technobabble" data-toc-child-of="glossary" }
**Technobabble** is really important:

* We want readers to understand the concept before moving on.
* We don't want unnecessary headings breaking the page's flow.
* We also want this definition appearing in the Table of Contents, for easy lookup.

## Glossary

### Peripheral

Of secondary or minor importance.
----

The above will generate:

* Category 1
** Intro
* Category 2
* Glossary
** Technobabble
** Peripheral

=== Inserting after another entry (manual ordering)

In the above example, we ended up with "Technobabble" appearing before
"Peripheral". Perhaps we wanted the entries to appear in alphabetical
order.

_Instead_ of specifying `data-toc-child-of`, we specify `data-toc-after`,
with the ID of the element that our entry should appear after.

[source,markdown]
----
## Alphabet

[](){: #b data-toc-label="B" data-toc-after="a" } B.
[](){: #a data-toc-label="A" data-toc-child-of="alphabet" } A.
[](){: #c data-toc-label="C" data-toc-after="b" } C.
----

The above will generate:

* Alphabet
** A
** B
** C

=== Sorting

Manual ordering each entry can be tedious. Frequently we just want to
alphabetically sort child entries. We can mark an entry as sorted by
adding the attribute `data-toc-sort`.

The example above can therefore be alternatively expressed as:

[source,markdown]
----
## Alphabet {: data-toc-sort }

[](){: #b data-toc-label="B" data-toc-child-of="alphabet" } B.
[](){: #a data-toc-label="A" data-toc-child-of="alphabet" } A.
[](){: #c data-toc-label="C" data-toc-child-of="alphabet" } C.
----

==== Reverse

Reverse ordering is supported by `data-toc-sort="reverse"` e.g.

[source,markdown]
----
## Alphabet {: data-toc-sort="reverse" }

[](){: #b data-toc-label="B" data-toc-child-of="alphabet" } B.
[](){: #a data-toc-label="A" data-toc-child-of="alphabet" } A.
[](){: #c data-toc-label="C" data-toc-child-of="alphabet" } C.
----

will generate:

* Alphabet
** C
** B
** A

==== Top Level (Root) Sorting

The top level entries don’t have a parent that you can mark as sorted.
Instead `data-toc-root-sort` may appear _anywhere_ in your document.
Otherwise, it behaves just like `data-toc-sort` on a TOC entry e.g.

Both:

[source,markdown]
----
[](){: #b data-toc-label="B" data-toc-root-sort } B.
[](){: #a data-toc-label="A" } A.
[](){: #c data-toc-label="C" } C.
----

and:

[source,markdown]
----
## B {: data-toc-root-sort }

## A

## C
----

will result in the table of contents:

* A
* B
* C

=== Removing an entry

A Markdown heading may be omitted from the generated table of contents by
adding the attribute `data-toc-omit`.

[source,markdown]
----
## Heading 1
## Heading 2 {: data-toc-omit }
## Heading 3
----

will result in the table of contents:

* Heading 1
* Heading 3

If you omit a heading that has sub-headings, the sub-headings will be
moved up a level, replacing the omitted heading.

[source,markdown]
----
## A
## B {: data-toc-omit }
### B1
### B2
## C
----

will result in the table of contents:

* A
* B1
* B2
* C

=== Custom URL entries

Rather than linking to an ID on the same page, you can insert a table of
contents entry that links to a URL by providing a `data-toc-url`
attribute.

[source,markdown]
----
## A

The sky is falling. [ref 1]
{: #sky-falling data-toc-label="#1 English Fairy Tales" data-toc-url="https://example.com" data-toc-child-of="references" }

## B

The earth is flat. [ref 2]
{: #dawn-treader data-toc-label="#2 The Voyage of the Dawn Treader" data-toc-url="https://example.com" data-toc-child-of="references" }

## References {: data-toc-sort }
----

Even though the link is to an external website, an ID is still mandatory.

WARNING: The
https://facelessuser.github.io/pymdown-extensions/extensions/magiclink/[PyMdown MagicLink]
extension breaks support for URLs appearing in attribute lists. You're
unable to create custom URL entries whilst using this extension.

==== Custom URL technical details

We inject an additional `url` field into
https://python-markdown.github.io/extensions/toc/[toc_tokens].

We use this field when generating the content of `md.toc`, thus both
`md.toc` and `md.toc_tokens` are URL-aware. If you've got direct access
to either of these then you're good to go.

===== mkdocs

If you're using mkdocs, it doesn't expose `toc_tokens` directly, but
rather its own data model. It has a `url` field, but is simply derived
from `toc_tokens['id']`. Thus, we monkey-patch mkdocs to instead return
`toc_tokens['url']` when it's available.

Admittedly, this is quite a wonky solution. If you're not using the
custom URL functionality you can disable the mkdocs patching in your
`mkdocs.yml` with:

[source,yaml]
----
markdown_extensions:
  - toc_ext:
    patch_mkdocs: false
----

== Contributing

Contributions welcome.

=== Development

At the time of writing pip cannot install editable poetry packages.

To appease pip, you can generate a `setup.py` with:

[source,sh]
----
poetry build --format sdist && tar -xvf dist/*-`poetry version -s`.tar.gz -O '*/setup.py' > setup.py
----

You’ll then be able to, in another Python project, install your local
editable package with:

[source,sh]
----
pip install -e /path/to/pymdown-toc/ext
----
